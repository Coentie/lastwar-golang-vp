package lastwar

import (
	"fmt"
	"image"
	"image/color"
	"image/png"
	"lastwar/notifier/hdadb"
	"os"
)

// Checks the printscreen if it can find any indication of an alert.
func CheckAlert() {
	ResetState()
	hdadb.PrintScreen()
	largeFile, err := os.Open(hdadb.PRINTSCREEN_FILE_NAME)
	if err != nil {
		fmt.Println("Error opening screenshot:", err)
		return
	}
	defer largeFile.Close()

	screenshot, err := png.Decode(largeFile)
	if err != nil {
		fmt.Println("Error decoding screenshot:", err)
		return
	}

	for label, pos := range GetAlertPositions() {
		if containsRed(screenshot, pos.x, pos.y, pos.w, pos.h) {
			//fmt.Printf("✅ Found red in %s region\n", label)
			_ = Approve(label)
		} else {
			//fmt.Printf("❌ No red found in %s region\n", label)
		}
	}
}

var redColors = []color.RGBA{
	{0xb4, 0x0a, 0x14, 0xff}, {0xb4, 0x2a, 0x32, 0xff}, {0xb8, 0x50, 0x4c, 0xff},
	{0xb9, 0x4e, 0x55, 0xff}, {0xbc, 0x32, 0x3b, 0xff}, {0xbd, 0x0a, 0x16, 0xff},
	{0xbe, 0x0d, 0x18, 0xff}, {0xc1, 0x0b, 0x17, 0xff}, {0xc2, 0x03, 0x15, 0xff},
	{0xc2, 0x0b, 0x17, 0xff}, {0xc3, 0x01, 0x13, 0xff}, {0xc5, 0x00, 0x15, 0xff},
	{0xc6, 0x00, 0x15, 0xff}, {0xc7, 0x00, 0x13, 0xff}, {0xc7, 0x00, 0x15, 0xff},
	{0xc7, 0x03, 0x16, 0xff}, {0xc8, 0x00, 0x16, 0xff}, {0xc8, 0x0d, 0x20, 0xff},
	{0xca, 0x00, 0x14, 0xff}, {0xcb, 0x00, 0x14, 0xff}, {0xcb, 0x76, 0x7b, 0xff},
	{0xce, 0x05, 0x17, 0xff}, {0xce, 0x56, 0x53, 0xff}, {0xd0, 0x06, 0x18, 0xff},
	{0xd1, 0x1a, 0x2c, 0xff}, {0xd1, 0x37, 0x41, 0xff}, {0xd1, 0x5b, 0x63, 0xff},
	{0xd3, 0x40, 0x4b, 0xff}, {0xd4, 0x30, 0x2c, 0xff}, {0xd7, 0x26, 0x26, 0xff},
	{0xd7, 0x75, 0x7b, 0xff}, {0xd8, 0x0c, 0x19, 0xff}, {0xd9, 0x83, 0x88, 0xff},
	{0xda, 0x27, 0x20, 0xff}, {0xdd, 0x0e, 0x14, 0xff}, {0xe4, 0x1a, 0x1c, 0xff},
	{0xe4, 0x2b, 0x26, 0xff}, {0xe8, 0x0f, 0x1e, 0xff}, {0xeb, 0x2a, 0x2a, 0xff},
	{0xee, 0x20, 0x1e, 0xff}, {0xee, 0x68, 0x67, 0xff}, {0xef, 0x23, 0x1c, 0xff},
	{0xef, 0x2c, 0x28, 0xff}, {0xef, 0x51, 0x4f, 0xff}, {0xf0, 0x51, 0x50, 0xff},
	{0xf1, 0x3c, 0x3c, 0xff}, {0xf1, 0x63, 0x63, 0xff}, {0xf2, 0x23, 0x1c, 0xff},
	{0xf2, 0x28, 0x21, 0xff}, {0xf3, 0x2c, 0x29, 0xff}, {0xf3, 0x2c, 0x2c, 0xff},
	{0xf5, 0x25, 0x1f, 0xff}, {0xf5, 0x2d, 0x2d, 0xff}, {0xf5, 0x31, 0x2b, 0xff},
	{0xf6, 0x1f, 0x17, 0xff}, {0xf6, 0x5e, 0x5e, 0xff}, {0xf6, 0x91, 0x91, 0xff},
	{0xf7, 0x2d, 0x29, 0xff}, {0xf8, 0x21, 0x1b, 0xff}, {0xf8, 0x39, 0x31, 0xff},
	{0xf9, 0x33, 0x2c, 0xff}, {0xfa, 0x22, 0x1b, 0xff}, {0xfb, 0x25, 0x1d, 0xff},
	{0xfc, 0x11, 0x22, 0xff}, {0xfc, 0x23, 0x1c, 0xff}, {0xfc, 0x2a, 0x20, 0xff},
	{0xfc, 0x49, 0x44, 0xff}, {0xfc, 0x5b, 0x55, 0xff}, {0xfd, 0x2b, 0x21, 0xff},
	{0xfd, 0x2e, 0x27, 0xff}, {0xfd, 0x34, 0x2d, 0xff}, {0xfd, 0x41, 0x3a, 0xff},
	{0xfd, 0x49, 0x42, 0xff}, {0xfe, 0x24, 0x1b, 0xff}, {0xfe, 0x24, 0x1c, 0xff},
	{0xfe, 0x25, 0x1c, 0xff}, {0xfe, 0x25, 0x1d, 0xff}, {0xfe, 0x26, 0x1d, 0xff},
	{0xfe, 0x26, 0x1e, 0xff}, {0xfe, 0x27, 0x1e, 0xff}, {0xfe, 0x2b, 0x21, 0xff},
	{0xfe, 0x2d, 0x25, 0xff}, {0xfe, 0x2e, 0x25, 0xff}, {0xfe, 0x2e, 0x27, 0xff},
	{0xfe, 0x2f, 0x27, 0xff}, {0xfe, 0x30, 0x29, 0xff}, {0xfe, 0x31, 0x2a, 0xff},
	{0xff, 0x12, 0x22, 0xff}, {0xff, 0x20, 0x18, 0xff}, {0xff, 0x22, 0x18, 0xff},
	{0xff, 0x23, 0x1a, 0xff}, {0xff, 0x24, 0x1b, 0xff}, {0xff, 0x24, 0x1c, 0xff},
	{0xff, 0x24, 0x24, 0xff}, {0xff, 0x27, 0x21, 0xff}, {0xff, 0x27, 0x27, 0xff},
	{0xff, 0x29, 0x21, 0xff}, {0xff, 0x2a, 0x20, 0xff}, {0xff, 0x2a, 0x23, 0xff},
	{0xff, 0x2b, 0x22, 0xff}, {0xff, 0x2b, 0x24, 0xff}, {0xff, 0x2c, 0x21, 0xff},
	{0xff, 0x2c, 0x23, 0xff}, {0xff, 0x2c, 0x24, 0xff}, {0xff, 0x2e, 0x2e, 0xff},
	{0xff, 0x33, 0x2d, 0xff}, {0xff, 0x34, 0x2d, 0xff},
}

func containsRed(img image.Image, x, y, w, h int) bool {
	for i := x; i < x+w; i++ {
		for j := y; j < y+h; j++ {
			pixel := color.RGBAModel.Convert(img.At(i, j)).(color.RGBA)
			for _, red := range redColors {
				if colorsSimilar(pixel, red, 10) {
					return true
				}
			}
		}
	}
	return false
}

func colorsSimilar(c1, c2 color.RGBA, tolerance uint8) bool {
	return absDiff(c1.R, c2.R) <= tolerance &&
		absDiff(c1.G, c2.G) <= tolerance &&
		absDiff(c1.B, c2.B) <= tolerance
}

func absDiff(a, b uint8) uint8 {
	if a > b {
		return a - b
	}
	return b - a
}
